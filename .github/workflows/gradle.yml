name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
permissions:
  contents: write
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Authenticate Git
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}

        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Grant execute permission to Gradle wrapper
      run: chmod +x ./gradlew
        
    - name: Build with Gradle Wrapper
      run: ./gradlew :plugin-core:shadowJar

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: plugin-jar
        path: plugin-core/build/libs/*.jar

    - name: Get latest commit messages
      id: commit_messages
      run: |
        TAG_COUNT=$(git tag | wc -l)
        if [ "$TAG_COUNT" -eq 0 ]; then
          TAG="v0.0.0"
        else
          TAG=$(git describe --tags --abbrev=0)
        fi
        COMMITS=$(git log --pretty=format:'- %s' $TAG..HEAD | tr '\n' ';' || echo "No commits since last tag")
        echo "COMMITS=$COMMITS" >> $GITHUB_ENV
        echo "TAG=$TAG" >> $GITHUB_ENV

    - name: Check plugin-core/build/libs contents
      run: |
        if [ -d "plugin-core/build/libs" ]; then
          ls plugin-core/build/libs/
        else
          echo "Brak katalogu plugin-core/build/libs. Kompilacja mogła nie zakończyć się powodzeniem."
        fi
    - name: Get last tag or set default
      run: |
        TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Using tag: $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV
        
    - name: Calculate new version tag
      id: new_tag
      run: |
        TAG=$(echo "${{ env.TAG }}" | sed 's/^v//')
        MAJOR=$(echo $TAG | cut -d. -f1)
        MINOR=$(echo $TAG | cut -d. -f2)
        PATCH=$(echo $TAG | cut -d. -f3)
        NEW_PATCH=$((PATCH + 1))
        NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        echo "Nowy tag: $NEW_TAG"

    - name: Configure Git user
      run: |
        git config user.name "[BOT] Release"
        git config user.email "actions@github.com"
    
    - name: Create Git tag for release
      run: |
        git tag "${{ env.NEW_TAG }}"
        git push origin "${{ env.NEW_TAG }}"

    - name: Create Release with commit messages
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.NEW_TAG }}
        body: |
          ## Zmiany w tej wersji:
          ${{ env.COMMITS }}
        files: plugin-core/build/libs/Navigation-${{ env.NEW_TAG }}.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
